(function() {
  var f, c, g;
  function e() {
    var k = navigator.userAgent,
      n = ["iPhone OS ", "Android "],
      m = {
        iphone: false,
        adnroid: false
      },
      h = [];
    for (var j = 0; j < n.length; j++) {
      var l = k.indexOf(n[j]);
      if (l > -1) {
        switch (j) {
          case 0:
            m.iphone = true;
            break;
          case 1:
            m.adnroid = true
        }
        h = k.substr(l + n[j].length, 6).split(/_|\./)
      }
    }
    return {
      iphone: m.iphone,
      android: m.adnroid,
      version: h
    }
  }
  function d() {
    var h = e();
    if (h.android && parseFloat(h.version[0] + "." + h.version[1]) >= 2.2 || h.iphone && Number(h.version[0]) > 4) {
      return true
    }
    return false
  }
  function b(h) {
    var j = d();
    g = $("#float_info")[0];
    if (!g) {
      g = document.createElement("div");
      g.id = "float_info";
      g.className = "err_popo";
      g.innerHTML = '<span id="float_info_msg"></span>';
      document.body.appendChild(g)
    }
    f && window.clearTimeout(f);
    a(1, h || "出现错误");
    if (!j) {
      var i = document.documentElement || document.body;
      g.style.position = "absolute";
      g.style.top = window.scrollY + ((document.documentElement.clientHeight || document.body.clientHeight) - g.offsetHeight) / 2 + "px"
    }
    f = window.setTimeout(function() {
        a(0)
      },
      2000)
  }
  function a(j, h) {
    var i = g,
      l = 0,
      k = 20;
    h && ($("#float_info_msg").html(h));
    if (j) {
      i.style.opacity = "0";
      i.style.display = "block";
      c && window.clearInterval(c);
      c = window.setInterval(function() {
          if (l == 10) {
            window.clearInterval(c)
          }
          l++;
          i.style.opacity = 0.1 * l
        },
        k)
    } else {
      c && window.clearInterval(c);
      c = window.setInterval(function() {
          if (l == 10) {
            window.clearInterval(c);
            i.style.display = "none"
          }
          l++;
          i.style.opacity = 0.1 * (10 - l)
        },
        k)
    }
  }
  window.salert = b
})();

(function(){
    window.breezeCommonJS = {

        HNServiceAgreement: ["《黑牛保险用户服务协议》（以下称“本协议”）系黑牛保险的运营商与用户之间关于使用黑牛保险的产品及服务所订立的协议。", "黑牛保险在此特别提醒，请您认真、仔细阅读本协议。一旦您选择接受黑牛保险提供的服务或注册成为黑牛保险用户，则视为您理解并接受本协议的所有条款。若您不理解、不接受本协议，请立即离开黑牛保险。", "1.定义", "1.1黑牛保险：指黑牛保险网站、黑牛保险手机软件、以及黑牛保险的运营商中的一个或多个。", "1.2用户：指使用黑牛保险服务的自然人，该自然人应当为中华人民共和国大陆地区公民，且具有完全民事行为能力；不具备完全民事行为能力的人，需在监护人的监护下使用黑牛保险服务；若不具备上述资格或条件，请勿使用黑牛保险服务。", "1.3个人信息：指用户在使用黑牛保险服务时向黑牛保险或相关第三方提交的包括但不限于身份证号、电话号码、年龄、住址等信息；或用户在使用黑牛保险服务时所产生的包括但不限于订单信息、配送信息中所包含的涉及用户隐私的信息。", "2.服务规则", "2.1黑牛保险向用户提供的包括但不限于保险测算、保险推荐、保险代赠、保险代销或其他产品推荐等服务，均基于用户所提交的信息以及相关产品市场的情况；由于信息的有限性、时效性以及市场状况等限制条件，该等服务仅能视为黑牛保险根据当时已知的情况所提供的建议，并不构成黑牛保险或第三方对用户进行交易的要约；用户有义务根据自己的实际情况判断该等建议，并对自己的决策负责。", "2.2用户可通过黑牛保险获得（包括免费领取与付费购买等）保险公司、保险经纪公司等第三方提供的保险产品及服务，用户通过黑牛保险提出获得该等产品或服务的申请时，即视为用户授权黑牛保险向相关第三方发送获得该等服务所需要的用户信息，该申请即视为用户通过黑牛保险向第三方发出的要约。", "2.3用户可通过黑牛保险获得其他产品或服务的推荐服务，用户通过黑牛保险向产品或服务的提供方提出获得该等产品或服务的申请时，即视为用户授权黑牛保险向相关第三方发送获得该等服务所需要的用户信息，该申请即视为用户通过黑牛保险向第三方发出的要约。", "2.4黑牛保险向用户提供服务的方式包括但不限于通过网站、手机软件、电子邮件、短信、电话等，除黑牛保险提供选择并经用户同意排除某种服务方式以外，用户接受黑牛保险通过任何合法方式提供服务。", "2.5黑牛保险有权在向用户提供服务的过程中，以各种服务方式向用户投放黑牛保险或第三方的营销信息，除黑牛保险提供选择并经用户同意排除以某种服务方式提供营销信息外，用户同意接收黑牛保险通过任何合法方式投放营销信息。", "2.6用户使用黑牛保险服务所需要的购买设备、获得电信业务等费用由用户自行承担。", "2.7用户使用黑牛保险服务，仅限于为用户本人使用；若为第三人使用的，应取得合法的代理权限且满足相关服务的法律法规，用户应自行承担为第三人使用服务所导致效力瑕疵的后果。", "2.8用户通过任何第三方使用黑牛保险服务，同样视为用户接受黑牛保险的服务，应当遵守本协议的约定。", "3.物流配送", "3.1黑牛保险本身不向用户提供物流配送服务，若存在需要寄送的物品，黑牛保险将委托第三方物流进行配送。黑牛保险在任何时候所做出的对于物流配送时限的承诺，其时限均为黑牛保险将配送物品交付第三方物流的时限，而非用户收到物品的时限。", "3.2用户提供的与配送相关的信息应当真实、明确，否则视为用户放弃对所配送物品的权利。", "3.3黑牛保险委托第三方物流进行配送的费用承担方式，按如下顺序决定：", "（1）按照黑牛保险与用户之间关于该次交易的单独约定；", "（2）按照黑牛保险在物流配送前关于该次交易物流费用的公示或通知；", "（3）按照与该次交易相关的交易习惯；", "（4）由黑牛保险与用户协商确定。", "4.用户信息", "4.1用户在使用黑牛保险服务时，向黑牛保险提供的信息应当是真实、准确的；若用户的现实情况有变更，用户应当及时操作更新该等信息，用户无法通过操作直接完成的更新，应当及时书面通知黑牛保险进行更新；用户因信息不真实、不准确或者未更新导致的责任由用户承担。", "4.2用户有义务保护自己的信息，不得将其账号密码及其他个人信息转让或出借；用户遗忘账号密码信息的，应当及时通知黑牛保险找回。", "4.3用户一旦发现其账号密码及其他个人信息被他人非法使用，应当立即采取有效方式通知黑牛保险；黑牛保险收到用户通知后，有权对发送通知的用户进行验证，用户应当配合验证；黑牛保险经确认第三人非法使用用户的账号密码及其他个人信息的，有权暂停或终止相关服务，并对相关账号采取锁定、关停直至删除等行为。", "4.4黑牛保险有在权判断用户的账号密码及其他个人信息被转让、被出借、被他人非法使用时，暂停或终止相关服务，并对相关账号采取锁定、关停直至删除等行为。", "4.5用户的账号密码及其他个人信息被转让、被出借、被他人非法使用导致用户或第三方损失的，黑牛保险不承担赔偿责任。", "5.隐私保护", "5.1黑牛保险保护用户的个人隐私，用户在使用黑牛保险服务时所提交或形成的个人信息，均在黑牛保险的保护范围内。", "5.2黑牛保险将严格按照行业标准保护用户的个人信息，对用户的个人信息进行妥善的保存、使用，除按照法律法规或本协议的其他约定，以及行政司法部门的要求外，不向任何第三方泄露用户的个人信息。", "5.3为了提升服务水平，黑牛保险有权在不泄露用户个人信息的前提下，对包含用户的个人信息的数据库进行分析和商业上的利用，用户接受该等分析和利用。", "5.4下列情况下，黑牛保险有权向有关第三方透露用户的个人信息：", "（1）用户授权黑牛保险向第三方透露；", "（2）用户通过黑牛保险向第三方申请获得产品或服务，而获得该等产品或服务需要用户的个人信息；", "（3）根据相关法律法规的规定；", "（4）根据行政主管部门或司法部门的合法要求；", "（5）因用户违反本协议，黑牛保险为维护自身或有关的第三方的合法权益。", "5.5用户了解，即使黑牛保险努力采取防范措施，也无法完全避免因为黑客攻击、计算机病毒、木马程序、个人账户密码泄露等原因导致的用户个人信息泄露；黑牛保险在出现该等情况时，将会积极帮助用户维护自己的合法权益，但不对因用户或第三方的过错导致的用户个人信息泄露承担责任。", "6.知识产权", "6.1用户保证向黑牛保险所提交的内容不构成对他人知识产权的侵犯，否则黑牛保险有权删除该等内容；黑牛保险因此承担了赔偿责任的，有权向用户进行追偿。", "6.2用户在使用黑牛保险服务时所提交的内容，一旦形成用户的知识产权，则对于其中可转让的部分，用户独家且不可撤销地转让给黑牛保险所有；用户不再以任何形式在其他地方发布或授权其他主体使用该等内容。", "6.3黑牛保险对向用户提供服务过程中所产生的内容享有完全的知识产权；除用于接受黑牛保险提供的服务外，用户不得在其他任何地方使用或授权他人使用该等内容。", "6.4用户不得以任何方式侵犯黑牛保险的知识产权，否则黑牛保险有权暂停或终止该用户在黑牛保险的服务，并要求该用户赔偿损失（包括预期利益损失）。", "7.使用限制", "用户使用黑牛保险服务时，应当遵守下列内容：", "（1）不得违反本协议的约定；", "（2）不得侵犯黑牛保险以及第三人的合法权益；", "（3）不得违反中国大陆的法律法规；", "（4）不得违反有关行政主管机关及司法机关的合法要求；", "（5）不得损害公共利益。", "用户违反上述内容的，黑牛保险有权采取包括但不限于删除相关内容、暂停服务、锁定账号等行动；用户因违反上述内容给黑牛保险造成损失，或者导致黑牛保险承担对第三人的责任的，黑牛保险有权要求用户承担相应的损失或责任。", "8.违约责任", "由于用户违反本协议约定，导致黑牛保险受到损失的，黑牛保险有权要求用户承担赔礼道歉、赔偿损失等责任；损失的范围包括但不限于：", "（1）黑牛保险受到的直接经济损害；", "（2）黑牛保险的预期利益减少；", "（3）黑牛保险的商誉、商业秘密、知识产权等被侵犯而受到的损失；", "（4）黑牛保险因用户过错而向第三方承担的责任；", "（5）黑牛保险为要求用户承担责任而支出的律师费、诉讼费等费用；", "（6）其他因用户过错导致黑牛保险所受到的损失。", "9.免责声明", "9.1用户了解，用户通过黑牛保险提交申请，并最终获得的第三方所提供的产品或服务，其提供方并非黑牛保险，若用户对该等产品或服务有争议，需与有关第三方解决该争议，黑牛保险不对该等产品或服务承担任何责任。", "9.2用户了解，黑牛保险无法保证也没有义务保证任何第三方提供的信息的真实性和有效性，用户应当对从黑牛保险获得的第三方信息（包括但不限于网页、营销邮件、外部链接等中的信息）进行谨慎地审核，并自行承担与第三方交易所产生的后果，黑牛保险不对用户与第三方的交易承担任何责任。", "9.3用户了解，尽管黑牛保险不断提高服务水平，优化软件硬件设备，完善防控制度，但是仍然无法完全避免因为网络中断、黑客攻击、计算机病毒、第三方程序问题以及其他技术原因导致的服务问题；由此所造成的用户损失，由用户或其他有过错的责任人承担，黑牛保险不承担任何责任。", "9.4对于地震、台风、水灾、海啸、雷电、火灾、瘟疫、流行病、战争、恐怖主义、敌对行为、暴动、罢工、停止供应主要服务、电力中断、政府管制或其它类似事件以及不可抗力，致使黑牛保险不能按约履行本协议，因此给用户造成损失的，黑牛保险不承担任何责任。", "10.协议更新", "10.1黑牛保险有权根据法律法规、相关政策、实际业务等的变化变更本协议；变更后的协议在黑牛保险上进行公示，新的协议一经公示即代替原来的协议。", "10.2用户有义务不时地注意本协议的变更。", "10.3新协议公示后，用户有权选择是否接受变更后的协议，若用户在协议变更后继续使用黑牛保险服务的，视为用户已经完全理解并接受变更后的协议；若用户对变更后的协议有任何的不理解、不接受，则应当立即停止使用黑牛保险服务。", "11.协议终止", "11.1用户在不影响黑牛保险及第三方利益的情况下，可以通过注销账号并停止使用黑牛保险服务的方式终止本协议。", "11.2根据相关法律法规的规定，或者因用户严重违反本协议约定，导致黑牛保险删除用户账号的，本协议终止。", "11.3本协议终止的，并不影响用户在协议终止之前，或者根据相关法律法规而应当承担的法律责任。", "12.通知方式", "除黑牛保险主动采用其他方式通知以外，黑牛保险对用户的通知均采用在黑牛保险上公示的方式做出，用户有义务不时的关注该等公示。", "13.争议解决", "13.1用户使用黑牛保险服务所导致的与黑牛保险之间的争议均适用中华人民共和国法律。", "13.2用户与黑牛保险之间的争议，双方应当友好协商解决，协商不成的，任何一方可向黑牛保险运营商所在地法院起诉。", "14.协议效力", "14.1若本协议中部分条款无效或无法继续履行的，本协议中其他条款的效力不受影响。", "14.2用户与第三方所订立的协议，与本协议的内容有冲突的，用户与黑牛保险之间的权利义务关系，按本协议的约定为准。"],
        MGBServiceAgreement: ["《蘑菇保保险用户服务协议》（以下称“本协议”）系蘑菇保保险的运营商与用户之间关于使用蘑菇保保险的产品及服务所订立的协议。", "蘑菇保保险在此特别提醒，请您认真、仔细阅读本协议。一旦您选择接受蘑菇保保险提供的服务或注册成为蘑菇保保险用户，则视为您理解并接受本协议的所有条款。若您不理解、不接受本协议，请立即离开蘑菇保保险。", "1.定义", "1.1蘑菇保保险：指蘑菇保保险网站、蘑菇保保险手机软件、以及蘑菇保保险的运营商中的一个或多个。", "1.2用户：指使用蘑菇保保险服务的自然人，该自然人应当为中华人民共和国大陆地区公民，且具有完全民事行为能力；不具备完全民事行为能力的人，需在监护人的监护下使用蘑菇保保险服务；若不具备上述资格或条件，请勿使用蘑菇保保险服务。", "1.3个人信息：指用户在使用蘑菇保保险服务时向蘑菇保保险或相关第三方提交的包括但不限于身份证号、电话号码、年龄、住址等信息；或用户在使用蘑菇保保险服务时所产生的包括但不限于订单信息、配送信息中所包含的涉及用户隐私的信息。", "2.服务规则", "2.1蘑菇保保险向用户提供的包括但不限于保险测算、保险推荐、保险代赠、保险代销或其他产品推荐等服务，均基于用户所提交的信息以及相关产品市场的情况；由于信息的有限性、时效性以及市场状况等限制条件，该等服务仅能视为蘑菇保保险根据当时已知的情况所提供的建议，并不构成蘑菇保保险或第三方对用户进行交易的要约；用户有义务根据自己的实际情况判断该等建议，并对自己的决策负责。", "2.2用户可通过蘑菇保保险获得（包括免费领取与付费购买等）保险公司、保险经纪公司等第三方提供的保险产品及服务，用户通过蘑菇保保险提出获得该等产品或服务的申请时，即视为用户授权蘑菇保保险向相关第三方发送获得该等服务所需要的用户信息，该申请即视为用户通过蘑菇保保险向第三方发出的要约。", "2.3用户可通过蘑菇保保险获得其他产品或服务的推荐服务，用户通过蘑菇保保险向产品或服务的提供方提出获得该等产品或服务的申请时，即视为用户授权蘑菇保保险向相关第三方发送获得该等服务所需要的用户信息，该申请即视为用户通过蘑菇保保险向第三方发出的要约。", "2.4蘑菇保保险向用户提供服务的方式包括但不限于通过网站、手机软件、电子邮件、短信、电话等，除蘑菇保保险提供选择并经用户同意排除某种服务方式以外，用户接受蘑菇保保险通过任何合法方式提供服务。", "2.5蘑菇保保险有权在向用户提供服务的过程中，以各种服务方式向用户投放蘑菇保保险或第三方的营销信息，除蘑菇保保险提供选择并经用户同意排除以某种服务方式提供营销信息外，用户同意接收蘑菇保保险通过任何合法方式投放营销信息。", "2.6用户使用蘑菇保保险服务所需要的购买设备、获得电信业务等费用由用户自行承担。", "2.7用户使用蘑菇保保险服务，仅限于为用户本人使用；若为第三人使用的，应取得合法的代理权限且满足相关服务的法律法规，用户应自行承担为第三人使用服务所导致效力瑕疵的后果。", "2.8用户通过任何第三方使用蘑菇保保险服务，同样视为用户接受蘑菇保保险的服务，应当遵守本协议的约定。", "3.物流配送", "3.1蘑菇保保险本身不向用户提供物流配送服务，若存在需要寄送的物品，蘑菇保保险将委托第三方物流进行配送。蘑菇保保险在任何时候所做出的对于物流配送时限的承诺，其时限均为蘑菇保保险将配送物品交付第三方物流的时限，而非用户收到物品的时限。", "3.2用户提供的与配送相关的信息应当真实、明确，否则视为用户放弃对所配送物品的权利。", "3.3蘑菇保保险委托第三方物流进行配送的费用承担方式，按如下顺序决定：", "（1）按照蘑菇保保险与用户之间关于该次交易的单独约定；", "（2）按照蘑菇保保险在物流配送前关于该次交易物流费用的公示或通知；", "（3）按照与该次交易相关的交易习惯；", "（4）由蘑菇保保险与用户协商确定。", "4.用户信息", "4.1用户在使用蘑菇保保险服务时，向蘑菇保保险提供的信息应当是真实、准确的；若用户的现实情况有变更，用户应当及时操作更新该等信息，用户无法通过操作直接完成的更新，应当及时书面通知蘑菇保保险进行更新；用户因信息不真实、不准确或者未更新导致的责任由用户承担。", "4.2用户有义务保护自己的信息，不得将其账号密码及其他个人信息转让或出借；用户遗忘账号密码信息的，应当及时通知蘑菇保保险找回。", "4.3用户一旦发现其账号密码及其他个人信息被他人非法使用，应当立即采取有效方式通知蘑菇保保险；蘑菇保保险收到用户通知后，有权对发送通知的用户进行验证，用户应当配合验证；蘑菇保保险经确认第三人非法使用用户的账号密码及其他个人信息的，有权暂停或终止相关服务，并对相关账号采取锁定、关停直至删除等行为。", "4.4蘑菇保保险有在权判断用户的账号密码及其他个人信息被转让、被出借、被他人非法使用时，暂停或终止相关服务，并对相关账号采取锁定、关停直至删除等行为。", "4.5用户的账号密码及其他个人信息被转让、被出借、被他人非法使用导致用户或第三方损失的，蘑菇保保险不承担赔偿责任。", "5.隐私保护", "5.1蘑菇保保险保护用户的个人隐私，用户在使用蘑菇保保险服务时所提交或形成的个人信息，均在蘑菇保保险的保护范围内。", "5.2蘑菇保保险将严格按照行业标准保护用户的个人信息，对用户的个人信息进行妥善的保存、使用，除按照法律法规或本协议的其他约定，以及行政司法部门的要求外，不向任何第三方泄露用户的个人信息。", "5.3为了提升服务水平，蘑菇保保险有权在不泄露用户个人信息的前提下，对包含用户的个人信息的数据库进行分析和商业上的利用，用户接受该等分析和利用。", "5.4下列情况下，蘑菇保保险有权向有关第三方透露用户的个人信息：", "（1）用户授权蘑菇保保险向第三方透露；", "（2）用户通过蘑菇保保险向第三方申请获得产品或服务，而获得该等产品或服务需要用户的个人信息；", "（3）根据相关法律法规的规定；", "（4）根据行政主管部门或司法部门的合法要求；", "（5）因用户违反本协议，蘑菇保保险为维护自身或有关的第三方的合法权益。", "5.5用户了解，即使蘑菇保保险努力采取防范措施，也无法完全避免因为黑客攻击、计算机病毒、木马程序、个人账户密码泄露等原因导致的用户个人信息泄露；蘑菇保保险在出现该等情况时，将会积极帮助用户维护自己的合法权益，但不对因用户或第三方的过错导致的用户个人信息泄露承担责任。", "6.知识产权", "6.1用户保证向蘑菇保保险所提交的内容不构成对他人知识产权的侵犯，否则蘑菇保保险有权删除该等内容；蘑菇保保险因此承担了赔偿责任的，有权向用户进行追偿。", "6.2用户在使用蘑菇保保险服务时所提交的内容，一旦形成用户的知识产权，则对于其中可转让的部分，用户独家且不可撤销地转让给蘑菇保保险所有；用户不再以任何形式在其他地方发布或授权其他主体使用该等内容。", "6.3蘑菇保保险对向用户提供服务过程中所产生的内容享有完全的知识产权；除用于接受蘑菇保保险提供的服务外，用户不得在其他任何地方使用或授权他人使用该等内容。", "6.4用户不得以任何方式侵犯蘑菇保保险的知识产权，否则蘑菇保保险有权暂停或终止该用户在蘑菇保保险的服务，并要求该用户赔偿损失（包括预期利益损失）。", "7.使用限制", "用户使用蘑菇保保险服务时，应当遵守下列内容：", "（1）不得违反本协议的约定；", "（2）不得侵犯蘑菇保保险以及第三人的合法权益；", "（3）不得违反中国大陆的法律法规；", "（4）不得违反有关行政主管机关及司法机关的合法要求；", "（5）不得损害公共利益。", "用户违反上述内容的，蘑菇保保险有权采取包括但不限于删除相关内容、暂停服务、锁定账号等行动；用户因违反上述内容给蘑菇保保险造成损失，或者导致蘑菇保保险承担对第三人的责任的，蘑菇保保险有权要求用户承担相应的损失或责任。", "8.违约责任", "由于用户违反本协议约定，导致蘑菇保保险受到损失的，蘑菇保保险有权要求用户承担赔礼道歉、赔偿损失等责任；损失的范围包括但不限于：", "（1）蘑菇保保险受到的直接经济损害；", "（2）蘑菇保保险的预期利益减少；", "（3）蘑菇保保险的商誉、商业秘密、知识产权等被侵犯而受到的损失；", "（4）蘑菇保保险因用户过错而向第三方承担的责任；", "（5）蘑菇保保险为要求用户承担责任而支出的律师费、诉讼费等费用；", "（6）其他因用户过错导致蘑菇保保险所受到的损失。", "9.免责声明", "9.1用户了解，用户通过蘑菇保保险提交申请，并最终获得的第三方所提供的产品或服务，其提供方并非蘑菇保保险，若用户对该等产品或服务有争议，需与有关第三方解决该争议，蘑菇保保险不对该等产品或服务承担任何责任。", "9.2用户了解，蘑菇保保险无法保证也没有义务保证任何第三方提供的信息的真实性和有效性，用户应当对从蘑菇保保险获得的第三方信息（包括但不限于网页、营销邮件、外部链接等中的信息）进行谨慎地审核，并自行承担与第三方交易所产生的后果，蘑菇保保险不对用户与第三方的交易承担任何责任。", "9.3用户了解，尽管蘑菇保保险不断提高服务水平，优化软件硬件设备，完善防控制度，但是仍然无法完全避免因为网络中断、黑客攻击、计算机病毒、第三方程序问题以及其他技术原因导致的服务问题；由此所造成的用户损失，由用户或其他有过错的责任人承担，蘑菇保保险不承担任何责任。", "9.4对于地震、台风、水灾、海啸、雷电、火灾、瘟疫、流行病、战争、恐怖主义、敌对行为、暴动、罢工、停止供应主要服务、电力中断、政府管制或其它类似事件以及不可抗力，致使蘑菇保保险不能按约履行本协议，因此给用户造成损失的，蘑菇保保险不承担任何责任。", "10.协议更新", "10.1蘑菇保保险有权根据法律法规、相关政策、实际业务等的变化变更本协议；变更后的协议在蘑菇保保险上进行公示，新的协议一经公示即代替原来的协议。", "10.2用户有义务不时地注意本协议的变更。", "10.3新协议公示后，用户有权选择是否接受变更后的协议，若用户在协议变更后继续使用蘑菇保保险服务的，视为用户已经完全理解并接受变更后的协议；若用户对变更后的协议有任何的不理解、不接受，则应当立即停止使用蘑菇保保险服务。", "11.协议终止", "11.1用户在不影响蘑菇保保险及第三方利益的情况下，可以通过注销账号并停止使用蘑菇保保险服务的方式终止本协议。", "11.2根据相关法律法规的规定，或者因用户严重违反本协议约定，导致蘑菇保保险删除用户账号的，本协议终止。", "11.3本协议终止的，并不影响用户在协议终止之前，或者根据相关法律法规而应当承担的法律责任。", "12.通知方式", "除蘑菇保保险主动采用其他方式通知以外，蘑菇保保险对用户的通知均采用在蘑菇保保险上公示的方式做出，用户有义务不时的关注该等公示。", "13.争议解决", "13.1用户使用蘑菇保保险服务所导致的与蘑菇保保险之间的争议均适用中华人民共和国法律。", "13.2用户与蘑菇保保险之间的争议，双方应当友好协商解决，协商不成的，任何一方可向蘑菇保保险运营商所在地法院起诉。", "14.协议效力", "14.1若本协议中部分条款无效或无法继续履行的，本协议中其他条款的效力不受影响。", "14.2用户与第三方所订立的协议，与本协议的内容有冲突的，用户与蘑菇保保险之间的权利义务关系，按本协议的约定为准。"],

        regularCheck: function(name) {
          var regMsg = '';
          switch (name)
          {
            case 'name':
              regMsg = /^[\u4e00-\u9fa5\u3400-\u4db5\ue000-\uf8ff]{2,21}(?:(•|·)[\u4e00-\u9fa5\u3400-\u4db5\ue000-\uf8ff]{2,21})*$/;
              break;
            case 'mobile':
              regMsg = /^1\d{10}$/;
              break;
            case 'idCard':
              regMsg = /^\d{15}(\d{2}[A-Za-z0-9])?$/;
              break;
            case 'birth':
              regMsg = /^\d{4}-\d{1,2}-\d{1,2}$/;
              break;
            case 'email':
              regMsg = /^\w+[-+.\w]*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/;
              break;
            case 'captcha':
              regMsg = /^[0-9]{4}$/;
              break;
            case 'img_captcha':
              regMsg = /^\S{4}$/;
              break;
          }
          return regMsg;
        },

        regularError: function(name) {
          var errMsg = '';
          switch (name)
          {
            case 'name':
              errMsg = '姓名由2-21个汉字组成';
              break;
            case 'mobile':
              errMsg = '手机格式错误';
              break;
            case 'idCard':
              errMsg = '身份证填写错误';
              break;
            case 'birth':
              errMsg = '请选择正确的出生日期';
              break;
            case 'email':
              errMsg = '邮箱错误';
              break;
            case 'captcha':
              errMsg = '验证码输入错误';
              break;
            case 'img_captcha':
              errMsg = '图形验证码输入错误';
              break;
            default:
              errMsg = '出现错误';
          }
          return errMsg;
        },

        regularEmpty: function(name) {
          var emptyMsg = '';
          switch (name)
          {
            case 'name':
              emptyMsg = '姓名不能为空';
              break;
            case 'mobile':
              emptyMsg = '手机号码不能为空';
              break;
            case 'idCard':
              emptyMsg = '身份证不能为空';
              break;
            case 'birth':
              emptyMsg = '请选择正确的出生日期';
              break;
            case 'email':
              emptyMsg = '邮箱不能为空';
              break;
            case 'captcha':
              emptyMsg = '验证码不能为空';
              break;
            case 'img_captcha':
              emptyMsg = '图形验证码不能为空';
              break;
            default:
              emptyMsg = '出现错误';
          }
          return emptyMsg;
        },

        _scrollTop: 0,
        forbidBodyScroll: function() {
            _scrollTop = $(document).scrollTop();
            $('body').css({
              'overflow': 'hidden',
              'position': 'fixed',
              'top': _scrollTop * -1
            });
        },

        recoverBodyScroll: function() {
            $('html, body').css({
              'overflow': 'visible',
              'position': 'static',
              'top': 'auto'
            }).scrollTop(_scrollTop);
        },

        isPc: function(){
            var userAgentInfo = navigator.userAgent;
            var devices = ["Android", "iPhone", "SymbianOS", "Windows Phone", "iPad", "iPod"];
            var flag = true;
            for (var i = 0; i < devices.length; i++) {
                if (userAgentInfo.indexOf(devices[i]) > 0) {
                  flag = false;
                  break;
                }
            }
            return flag;
        },

        formatFormData: function(form_id) {
          var data = {};
          var formData = $(form_id).serializeArray();
          $.each(formData, function () {
              if (data[this.name] !== undefined) {
                  if (!data[this.name].push) {
                      data[this.name] = [data[this.name]];
                  }
                  data[this.name].push(this.value || '');
              } else {
                  data[this.name] = this.value || '';
              }
          });
          return data;
        },

        countAge: function(params) {
          var age = 0,
              birth = '',
              now = new Date(),
              birth_year = '',
              brith_month = '',
              brith_day = '',
              now_year = now.getFullYear(),
              now_month = now.getMonth() + 1,
              now_date = now.getDate(),
              birth_reg = /^\d{4}-\d{1,2}-\d{1,2}$/,
              idcard_reg = /^\d{15}(\d{2}[A-Za-z0-9])?$/;

          if (birth_reg.test(params)) {
            birth = params.split('-');
          } else if (idcard_reg.test(params)) {
            birth = (params.substring(6, 10) + '-' + params.substring(10, 12) + '-' + params.substring(12, 14)).split('-');
          } else {
            return age;
          }

          birth_year = birth[0];
          birth_month = birth[1];
          birth_date = birth[2];

          age = now_year - birth_year;

          if (now_month < birth_month) {
            age -= 1;
          } else if ((now_month == birth_month) && (now_date < birth_date)) {
            age -= 1;
          }
          if (age < 0) {
            age = 0;
          }
          return age;
        },

        phoneBlurShowIdcard: function (options) {
            var url = options.url || '/activity/check_limit',
                data = options.data || '',
                idcardElement = options.idcardElement || null,
                jwtTokenElement = options.jwtTokenElement || null;

            url = url || '/activity/check_limit';
            $.ajax({
                type: 'get',
                url: url,
                async: false,
                data: data,
                success: function(response) {
                    $(jwtTokenElement).val(response.data.jwt_token);
                    if (response.status === 0) {
                        $(idcardElement).css('display', 'block');
                    } else {
                        $(idcardElement).css('display', 'none');
                    }
                },
                error: function() {
                    salert('网络繁忙，请稍后重试...')
                }
            });
        },

        _timer: null,

        countDown: function (target) {
            var _this = this;
            var times = 60;

            if ($(target).is('input')) {
                $(target).attr('disabled',true).val(times + '秒后重试');
                _this._timer = setInterval(function () {
                    times --;
                    $(target).val(times + '秒后重试');
                  if(times <= 0){
                    $(target).attr('disabled', false);
                    $(target).val('获取验证码');
                    clearInterval(_this._timer);
                    times = 60;
                  }
                }, 1000);
            } else {
                $(target).text(times + '秒后重试');
                _this._timer = setInterval(function () {
                    times --;
                    $(target).text(times + '秒后重试');
                  if(times <= 0){
                    $(target).text('获取验证码');
                    clearInterval(_this._timer);
                    times = 60;
                  }
                }, 1000);
            }
        },

        getCaptcha: function (options) {
            var _this = this;
            var url = options.url || '/gen/phone_captcha',
                data = options.data || '',
                target = options.target || null,
                callback = options.callback || function(){};

            $.ajax({
                type: 'get',
                url: url,
                data: data,
                success: function(response){
                  if(response.error_code === 0)
                  {
                    _this.countDown(target);
                    callback();
                  }
                  else
                  {
                    salert(response.error_msg);
                  }
                },
                error: function(){
                  salert('网络繁忙，请稍后重试...');
                }
            });
        },

        verifyCaptcha: function (options) {
            var _this = this;
            var url = options.url || '/verify/phone_captcha',
                data = options.data || '',
                target = options.target || null,
                callback = options.callback || function(){};

            $.ajax({
                type: 'get',
                url: url,
                data: data,
                success: function(response){
                  if(response.error_code != 0)
                  {
                    $(target).val('');
                    salert(response.error_msg);
                  }
                  else
                  {
                    $(target).val(response.token);
                    callback();
                  }
                },
                error: function() {
                  salert('网络繁忙，请稍后重试...');
                }
            });
        }
    }
})();
